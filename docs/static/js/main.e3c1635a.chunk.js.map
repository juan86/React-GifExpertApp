{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifts.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGif","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAhBc,SAAEP,GAAF,OAASF,EAAcE,EAAEQ,OAAOF,a,QCLjDG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAKA,Q,uBCPJK,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEZN,EAFY,iDAEoCO,UAAWF,GAF/C,+DAGCG,MAAMR,GAHP,cAGZS,EAHY,gBAKKA,EAAKC,OALV,uBAKVC,EALU,EAKVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXxB,kBAcXY,GAdW,4CAAH,sDCMNK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECLwB,SAAEA,GAE1B,MAA0BrB,mBAAS,CAC/B2B,KAAK,GACLO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAM,SAAAR,GAECM,EAAS,CACLT,KAAMG,EACNI,SAAS,SAGzB,CAACb,IAEEc,EDbwBI,CAAclB,GAAjCU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAEpB,OACI,qCACI,6BAAKb,IAEHa,GAAW,mBAAGjB,UAAW,mCAAd,wBAEb,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEQtB0B,EAxBM,WAEjB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ0C,EAAWZ,KAAI,SAACR,GAAD,OACX,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCZlCqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e3c1635a.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) =>{\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = ( e ) => setInputValue(e.target.value);\r\n\r\n    const handleSubmit = (e) =>{     \r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__zoomIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGif = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=xR5TNODe1qv2k4pcUk2jby64bsjhknnM`;\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs\r\n}","// import { useState, useEffect } from 'react';\r\n// import { getGif } from '../helpers/getGifts';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );    \r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            \r\n            { loading && <p className= \"animate__animated animate__flash\">Loading...</p> }\r\n            \r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img =>\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    )\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};","import { useState, useEffect } from \"react\";\r\nimport { getGif } from '../helpers/getGifts';\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif( category )\r\n            .then( img =>{\r\n\r\n                    setState({\r\n                        data: img,\r\n                        loading: false\r\n                    })  \r\n            });\r\n     }, [category]);\r\n\r\n    return state; //    {data: [], loading: true}\r\n}","import { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category) =>\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}